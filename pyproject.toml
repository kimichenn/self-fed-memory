[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "self-fed-memory"
version = "0.1.0"
description = "A personal AI assistant with long-term memory that learns from your notes and conversations."
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
authors = [{ name = "Kimi Chen" }]
keywords = ["ai", "memory", "rag", "chatbot", "personal-assistant", "langchain"]
classifiers = [
	"Development Status :: 3 - Alpha",
	"Intended Audience :: Developers",
	"License :: OSI Approved :: MIT License",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
	# Core dependencies
	"python-frontmatter==1.1.0",
	"pydantic==2.11.7",
	"pydantic-settings==2.10.1",

	# LangChain ecosystem
	"langchain==0.3.26",
	"langchain-core==0.3.70",
	"langchain-community==0.3.27",
	"langchain-openai==0.3.28",
	"langchain-pinecone==0.2.11",      # LangChain integration for Pinecone
	"langchain-text-splitters==0.3.8",

	# Vector stores and embeddings
	"pinecone==7.3.0",
	"openai==1.97.0",

	# Web framework (for future API)
	"fastapi==0.116.1",
	"uvicorn[standard]==0.35.0",

	# Utilities
	"python-dotenv==1.1.1",
	"rich==14.0.0",         # For better CLI output
	"typer==0.16.0",        # For CLI tools
]

[project.optional-dependencies]
test = [
	"pytest==8.4.1",
	"pytest-cov==6.2.1",
	"pytest-mock==3.14.1",
	"pytest-asyncio==0.26.0",
	"httpx==0.28.1",          # For testing FastAPI
	"coverage==7.10.0",
]
dev = [
	"ruff>=0.1.0",
	"mypy>=1.5.0",
	"pre-commit>=3.0.0",
	"ipython>=8.0.0",
	"jupyter>=1.0.0",
]
ui = ["streamlit>=1.28.0", "gradio>=4.0.0"]
all = ["self-fed-memory[test,dev,ui]"]

[project.urls]
Homepage = "https://github.com/kimichenn/self-fed-memory"
Repository = "https://github.com/kimichenn/self-fed-memory"
Issues = "https://github.com/kimichenn/self-fed-memory/issues"
Documentation = "https://github.com/kimichenn/self-fed-memory#readme"

[project.scripts]
ingest-folder = "scripts.ingest_folder:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*", "scripts*"]

# Pytest configuration
[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
	"--strict-markers",
	"--strict-config",
	"--verbose",
	"-ra",
	"--cov=app",
	"--cov-report=term-missing",
	"--cov-report=html:htmlcov",
	"--cov-fail-under=80",
]
markers = [
	"slow: marks tests as slow (deselect with '-m \"not slow\"')",
	"integration: marks tests as integration tests",
	"unit: marks tests as unit tests",
]
filterwarnings = ["ignore::UserWarning", "ignore::DeprecationWarning"]

# Ruff configuration (linting and formatting)
[tool.ruff]
line-length = 88
target-version = "py311"
extend-exclude = [
	".venv",
	"venv",
	"__pycache__",
	".pytest_cache",
	"htmlcov",
	".coverage",
]

[tool.ruff.lint]
select = [
	"E",   # pycodestyle errors
	"W",   # pycodestyle warnings
	"F",   # pyflakes
	"I",   # isort
	"B",   # flake8-bugbear
	"C4",  # flake8-comprehensions
	"UP",  # pyupgrade
	"SIM", # flake8-simplify
]
ignore = [
	"E501", # line too long (handled by formatter)
	"B008", # do not perform function calls in argument defaults
	"B905", # zip without an explicit strict parameter
]

[tool.ruff.lint.isort]
force-single-line = true
force-sort-within-sections = true
single-line-exclusions = ["typing"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["tests.*", "scripts.*"]
ignore_errors = true

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*", "*/venv/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
	"pragma: no cover",
	"def __repr__",
	"if self.debug:",
	"if settings.DEBUG",
	"raise AssertionError",
	"raise NotImplementedError",
	"if 0:",
	"if __name__ == .__main__.:",
	"class .*\\bProtocol\\):",
	"@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
